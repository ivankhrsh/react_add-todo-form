{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","cn","completed","title","TodoList","todos","map","findUserById","todoUserId","users","find","todoWithUsers","userId","usersFromServer","App","useState","setTitle","isValidTitle","setIsValidTitle","selectedOption","setSelectedOption","isValidSelectedOption","setIsValidSelectedOption","setTodos","onSubmit","event","preventDefault","length","prevTodos","Math","max","htmlFor","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bd78955.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC } from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User,\n}\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { FC } from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { TodoWithUser } from '../../types/TodoWithUser';\n\ninterface Props {\n  todo: TodoWithUser,\n}\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      key={todo.id}\n      className={cn(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      { todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { TodoWithUser } from '../../types/TodoWithUser';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: TodoWithUser[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        return (todo.user && <TodoInfo todo={todo} key={todo.id} />);\n      })}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst findUserById = (todoUserId: Todo['userId'], users:User[]) => {\n  return users.find(user => user.id === todoUserId) || null;\n};\n\nconst todoWithUsers = todosFromServer.map(todo => ({\n  ...todo,\n  user: findUserById(todo.userId, usersFromServer),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [isValidTitle, setIsValidTitle] = useState(true);\n  const [selectedOption, setSelectedOption] = useState(0);\n  const [isValidSelectedOption, setIsValidSelectedOption] = useState(true);\n  const [todos, setTodos] = useState(todoWithUsers);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsValidTitle(true);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(+event.target.value);\n    setIsValidSelectedOption(true);\n  };\n\n  const addNewTodo = (() => setTodos(prevTodos => [...prevTodos, {\n    id: Math.max(...prevTodos.map(todo => todo.id)) + 1,\n    title,\n    completed: false,\n    userId: selectedOption,\n    user: findUserById(selectedOption, usersFromServer),\n  }]));\n\n  const handleFormSubmit = (\n    (event:React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (title.length && selectedOption !== 0) {\n        addNewTodo();\n        setTitle('');\n        setSelectedOption(0);\n      } else {\n        if (selectedOption === 0) {\n          setIsValidSelectedOption(false);\n        }\n\n        if (title.length === 0) {\n          setIsValidTitle(false);\n        }\n      }\n    });\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"title\">{'Title: '}</label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            placeholder=\"Enter a title\"\n            onChange={handleInputChange}\n          />\n          {!isValidTitle && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">{'User: '}</label>\n\n          <select\n            data-cy=\"userSelect\"\n            value={selectedOption}\n            onChange={handleSelectChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {!isValidSelectedOption\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}